/*
Copyright 2020 The Kubernetes Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/s1061123/k8s-crd-sample/pkg/apis/k8s.cni.cncf.io/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SampleCRDLister helps list SampleCRDs.
type SampleCRDLister interface {
	// List lists all SampleCRDs in the indexer.
	List(selector labels.Selector) (ret []*v1.SampleCRD, err error)
	// SampleCRDs returns an object that can list and get SampleCRDs.
	SampleCRDs(namespace string) SampleCRDNamespaceLister
	SampleCRDListerExpansion
}

// sampleCRDLister implements the SampleCRDLister interface.
type sampleCRDLister struct {
	indexer cache.Indexer
}

// NewSampleCRDLister returns a new SampleCRDLister.
func NewSampleCRDLister(indexer cache.Indexer) SampleCRDLister {
	return &sampleCRDLister{indexer: indexer}
}

// List lists all SampleCRDs in the indexer.
func (s *sampleCRDLister) List(selector labels.Selector) (ret []*v1.SampleCRD, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.SampleCRD))
	})
	return ret, err
}

// SampleCRDs returns an object that can list and get SampleCRDs.
func (s *sampleCRDLister) SampleCRDs(namespace string) SampleCRDNamespaceLister {
	return sampleCRDNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SampleCRDNamespaceLister helps list and get SampleCRDs.
type SampleCRDNamespaceLister interface {
	// List lists all SampleCRDs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.SampleCRD, err error)
	// Get retrieves the SampleCRD from the indexer for a given namespace and name.
	Get(name string) (*v1.SampleCRD, error)
	SampleCRDNamespaceListerExpansion
}

// sampleCRDNamespaceLister implements the SampleCRDNamespaceLister
// interface.
type sampleCRDNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SampleCRDs in the indexer for a given namespace.
func (s sampleCRDNamespaceLister) List(selector labels.Selector) (ret []*v1.SampleCRD, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.SampleCRD))
	})
	return ret, err
}

// Get retrieves the SampleCRD from the indexer for a given namespace and name.
func (s sampleCRDNamespaceLister) Get(name string) (*v1.SampleCRD, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("samplecrd"), name)
	}
	return obj.(*v1.SampleCRD), nil
}
